enum Participation {
    GroupMentoring
    SprintReleaseObserver
    CodeReview
    OneOnOne
}

enum Day {
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
    Sunday
}

enum Time {
    Morning
    Afternoon
    Evening
}

enum Frequency {
    SemiWeekly
    Monthly
    AtWill
}

type Availability {
    day: [Day]!
    time: [Time]!
    frequency: [Frequency]!
}

enum Role {
    designer
    engineer
    dataScientist
}

type Participant {
    userId: ID!
    role: Role!
    firstName: String!
    lastName: String!
    email: String!
    availability: [Availability]
    engineeringSkills: [String]
    engineeringTechnologies: [String]
    designSkills: [String]
    designAbilities: [String]
    toLearn: String
    portfolio: String
    connection: String!
}

type Mentor {
    userId: ID!
    firstName: String!
    lastName: String!
    email: String!
    role: Role!
    engineeringSkills: String
    engineeringTechnologies: String
    designSkills: String
    designAbilities: String
    participation: [Participation]!
    availability: [Availability]!
    connection: String
}

type Project {
    projectId: ID!
    name: String!
    createdBy: String
    descriptions: String
    objectives: String
    targetAudiences: String
    successCriteria: String
    implementations: String
    scopes: String
    scopeTiming: String
    deliverables: String
    timings: String
    engineeringSkills: String
    engineeringTechnologies: String
    designAbilities: String
    designSkills: String
    dependencies: String
    risks: String
}